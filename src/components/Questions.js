import React from 'react';
import {Badge} from 'react-bootstrap';

const answerList = [
    {
        question: <div className='question'>
            <p>Расскажите, чем, на ваш взгляд, отличается хорошее клиентское приложение от плохого с точки зрения:</p>
            <ul>
                <li>пользователя</li>
                <li>менеджера проекта</li>
                <li>дизайнера</li>
                <li>верстальщика</li>
                <li>серверного программиста</li>
            </ul>
        </div>,
        answer: <ul>
            <li>Отзывчивость, быстрота реагирования, удобство</li>
            <li>Приложение сделано быстро и качественно</li>
            <li>Красота</li>
            <li>Семантичность, правильная организация структуры проекта, разграничение стилей</li>
            <li>Ограничение запросов на сервер, перенос серверной логики на клиент</li>
        </ul>
    }, {
        question: <div className='question'>
            <p>Опишите основные особенности разработки крупных многостраничных сайтов,
                функциональность которых может меняться в процессе реализации и поддержки.</p>
            <p>Расскажите о своем опыте работы над подобными сайтами: какие подходы,
                инструменты и технологии вы применяли на практике, с какими проблемами
                сталкивались и как их решали. </p>
        </div>,
        answer: 'Компонентный подход, разделение страниц на разные сущности. Я применял react-router, были трудности с настройками сервера, чтоб на любой запрос отправлялся index.html. Пришлось пользоваться hash-router.'
    }, {
        question: <div className='question'>
            <p>При разработке интерфейсов с использованием компонентной архитектуры часто
                используются термины <b>Presentational Сomponents</b> и <b>Сontainer Сomponents</b>. Что
                означают данные термины? Зачем нужно такое разделение, какие у него есть
                плюсы и минусы?</p>
        </div>,
        answer: <div>
            <p>Presentational Сomponents отвечают за внешний вид, Сontainer Сomponents - за логику. Подробнее <a target='_blank'
                href='https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0'>тут</a>.</p>
        </div>
    }, {
        question: 'Как устроено наследование в JS? Расскажите о своем опыте реализации JSнаследования без использования фреймворков.',
        answer: 'Наследование реализовано через прототипы. У каждого экземпляра класса есть объект-прототип, в котором содержаться все методы. Можно вручную указать объект-прототип, тем самым унаследовать его методы.'
    }, {
        question: 'Какие библиотеки можно использовать для написания тестов end-to-end во фронтенде? Расскажите о своем опыте тестирования веб-приложений. ',
        answer: 'Chai, Mocha, Enzime. Когда-то попробовал исппользовать, но не прижилось.'
    }, {
        question: 'Вам нужно реализовать форму для отправки данных на сервер, состоящую из нескольких шагов. В вашем распоряжении дизайн формы и статичная верстка, в которой не показано, как форма должна работать в динамике. Подробного описания, как должны вести себя различные поля в зависимости от действий пользователя, в требованиях к проекту нет. Ваши действия?',
        answer: 'Что-нибудь придумаю.'
    }, {
        question: 'Расскажите, какие инструменты помогают вам экономить время в процессе написания, проверки и отладки кода.',
        answer: 'Eslint, обычная консоль разработчика, react developers tools.'
    }, {
        question: <div>
            <p>Какие ресурсы вы используете для развития в профессиональной сфере? Приведите несколько конкретных примеров (сайты, блоги и так далее).</p>
            <p>Какие ещё области знаний, кроме тех, что непосредственно относятся к работе,
                вам интересны?</p>
        </div>,
        answer: <div>
            <ul>
                <li>YouTube туториалы, <a target='blank' href='https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA'>например</a></li>
                <li>Книги (Девид фленаган, Николас Закас)</li>
                <li><a target='blank' href='https://www.codewars.com/users/sfilippenko'>Codewars</a></li>
            </ul>
            <p>Интересна Java и shell scripting</p>
        </div>
    }, {
        question: 'Расскажите нам немного о себе и предоставьте несколько ссылок на последние работы, выполненные вами.',
        answer: <p>Мои работы можете посмотреть на моей странице <a target='blank' href='https://github.com/sfilippenko'>GitHub</a></p>
    }
];

export default function Questions () {
    return (
        <div>
            {
                answerList.map(({question, answer}, index) => {
                    return <div key={index} className='medium-block'>
                        <div><Badge>Вопрос {index + 1}</Badge></div>
                        {typeof question === 'string' ? <p className='question'>{question}</p> : question}
                        <div style={{marginBottom: 20}}/>
                        {typeof answer === 'string' ? <p>{answer}</p> : answer}
                    </div>
                })
            }
        </div>
    )
}